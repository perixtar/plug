import { z } from 'zod'

export const codeArtifactSchema = z.object({
  commentary: z
    .string()
    .describe(
      `Detailed summary of the user message broken down into steps in first person point of view.`,
    ),
  title: z
    .string()
    .optional()
    .describe('Short title of the code being generated. Max 3 words.'),
  description: z
    .string()
    .optional()
    .describe('Short description of the code being generated. Max 1 sentence.'),
  additional_dependencies: z
    .array(z.string())
    .optional()
    .describe('Additional dependencies required by the code being generated.'),
  has_additional_dependencies: z
    .boolean()
    .optional()
    .describe(
      'Detect if additional dependencies that are not included in the template are required by the code being generated.',
    ),
  install_dependencies_command: z
    .string()
    .optional()
    .describe(
      'Command to install additional dependencies required by the code being generated.',
    ),
  //   code: z.string().describe('Code generated by the code being generated. Only runnable code is allowed.'),
  code: z
    .array(
      z.object({
        file_name: z.string().describe('Name of the file.'),
        file_path: z
          .string()
          .describe('Relative path to the file, including the file name.'),
        file_content: z.string().describe('Content of the file.'),
        file_finished: z
          .boolean()
          .describe('Detect if finished generating the file.'),
      }),
    )
    .optional(),
  page: z
    .string()
    .optional()
    .nullable()
    .describe(
      'Initial route path the user should see on app load; e.g. "/" for home content or "/feeds" for feeds content',
    ),
  // code_finished: z.boolean().describe('Detect if finished generating the code.'),
  // error: z.string().optional().describe('Error message if the code being generated is not valid.'),
})

export type CodeArtifact = z.infer<typeof codeArtifactSchema>

// user intent schema
export enum UserIntentEnum {
  CodeGeneration = 'code_generation',
  Informational = 'informational',
}
export const userIntentEnum = z.nativeEnum(UserIntentEnum)

export const userIntentSchema = z.object({
  intent: userIntentEnum,
})
// for next response
export type UserIntentResponse = z.infer<typeof userIntentSchema>

// general qa schema
export const qaResponseSchema = z.object({
  textAnswer: z
    .string()
    .describe(
      `text response to user's question that does not generate any code`,
    ),
})

export type QAResponse = z.infer<typeof qaResponseSchema>

export const intentSchema = z.object({
  intent: userIntentEnum,
  steps: z
    .string()
    .optional()
    .describe(
      `If the intent is code_generation, break down the user message into specific steps that need to be performed by the coding expert to achieve the goal. Always use NextJS 14 with the App Router and TypeScript. If the intent is informational, you can skip this field.`,
    ),
  answer: z
    .string()
    .optional()
    .describe(
      `If the intent is informational, provide a short answer to the user's question. If the intent is code_generation, you can skip this field.`,
    ),
  projectId: z
    .string()
    .optional()
    .describe(
      `The project ID can be found the system prompt if provided. Do not hallucinate this value if not provided.`,
    ),
})

export type UserIntent = z.infer<typeof intentSchema>
